
# ExternalSecret for argo cd admin user password
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: argocd-secret         # Name of this ExternalSecret resource (Kubernetes internal use)
  namespace: argocd              # Namespace where argocd and ESO are running (must match)
spec:
  refreshInterval: 1m             # Check AWS Secrets Manager every 1 minute for changes

  secretStoreRef:
    name: aws-secret-store        # Refers to the SecretStore object (which connects Kubernetes to AWS)
    kind: SecretStore             # The kind of store (in this case, AWS Secrets Manager)

  target:
    name: argocd-secret       # The name of the final Kubernetes Secret that will be created.
                                  # This is what values.yaml file will use to get what will be injected into the values.yaml file of argocd to overwrite the existing admin password
  # Define each key you want to extract from AWS Secrets Manager and copy into Kubernetes
  data:
    - secretKey: admin.password        # This will become a key in the K8s Secret (e.g., admin.password: password)
      remoteRef:
        key: /argocd/adminpassword    # Name of the secret in AWS Secrets Manager
        property: bcrypt_password        # Property (key) inside that secret to extract

    - secretKey: server.secretkey        
      remoteRef:
        key: /argocd/serversecretkey
        property: secretkey_base64  